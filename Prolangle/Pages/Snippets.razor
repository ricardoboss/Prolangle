@page "/Snippets"

@using Prolangle.Components
@using Prolangle.Services
@using Prolangle.Languages.Framework
@using Prolangle.Snippets

@inject GuessGame GuessGame
@inject LanguageSnippetProvider LanguageSnippetProvider

<Heading Size="HeadingSize.Is1">Guess a Language</Heading>
<Heading Size="HeadingSize.Is2">â€¦based on a sample code snippet</Heading>

@if (_won)
{
	<Heading Size="HeadingSize.Is3">You won!</Heading>
}
else
{
	<LanguageSelection AvailableLanguages="@AvailableLanguages" OnLanguageSelected="@OnLanguageSelected"/>
}

@if (_showSourceCode)
{
	<CodeSnippet Language="TargetLanguage!">@_concealedSourceCode</CodeSnippet>
}

<div style="display: flex; flex-wrap: wrap; flex-direction: row; gap: 1em;">
	@foreach (var language in RevealedLanguages)
	{
		@if (language == TargetLanguage)
		{
			<span style="background: green; padding: 0.5em">@language.Name</span>
		}
		else
		{
			<span style="background: red; padding: 0.5em">@language.Name</span>
		}
	}
</div>

@code
{
	private IReadOnlyList<ILanguage> AvailableLanguages => LanguageSnippetProvider.SupportedLanguages.Where(l => !RevealedLanguages.Contains(l)).ToList();
	private List<ILanguage> RevealedLanguages { get; } = [];
	private ILanguage? TargetLanguage { get; set; }
	private ICodeSnippet? Snippet { get; set; }
	private bool _won;

	private bool _showSourceCode = false;

	private SnippetRevealer? _snippetRevealer;

	private string? _concealedSourceCode;

	protected override async Task OnInitializedAsync()
	{
		TargetLanguage = GuessGame!.SnippetGameLanguage;
		Snippet = LanguageSnippetProvider!.GetSnippet(TargetLanguage);

		_snippetRevealer = new SnippetRevealer(GuessGame, Snippet.SourceCode, useJitter: true);

		await UpdateConcealedSourceCode(_snippetRevealer!.RevealMore());
	}

	private async Task OnLanguageSelected(ILanguage language)
	{
		RevealedLanguages.Add(language);

		var result = TargetLanguage!.Id == language.Id;

		if (result)
		{
			_won = true;
			_snippetRevealer!.Win();

			await UpdateConcealedSourceCode(Snippet!.SourceCode);
		}
		else
		{
			await UpdateConcealedSourceCode(_snippetRevealer!.RevealMore());
		}

		StateHasChanged();
	}

	private async Task UpdateConcealedSourceCode(string newSourceCode)
	{
		_showSourceCode = false;
		StateHasChanged();

		// force Blazor to dispose the <CodeSnippet> component so JS gets cleaned up
		await Task.Yield();

		_concealedSourceCode = newSourceCode;

		_showSourceCode = true;
		StateHasChanged();
	}
}
