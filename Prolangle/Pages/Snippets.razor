@page "/Snippets"
@using Prolangle.Components
@using Prolangle.Interfaces
@using Prolangle.Languages.Framework
@using Prolangle.Services
@using Prolangle.Snippets

@inject IGuessGameProvider GameProvider

<style>
	code {
		background: transparent;
	}

	.snippet-language {
		padding: 0.5em;
    	border-radius: 0.5em;
    	color: var(--color-on-match-inner);
	}

	.snippet-language > span {
		padding: 0.3em 0.5em;
        background: var(--color-match-inner);
        border-radius: 0.35em;
    }

	.snippet-language-match {
		color: var(--color-on-exact-match);
		background-color: var(--color-exact-match);
	}

	.snippet-language-no-match {
		color: var(--color-on-no-match);
		background-color: var(--color-no-match);
	}
</style>

<Heading Size="HeadingSize.Is1">Guess a Language</Heading>
<Heading Size="HeadingSize.Is2">â€¦based on a sample code snippet</Heading>

@if (Won)
{
	<Heading Size="HeadingSize.Is3">You won!</Heading>

	<Div Padding="Padding.Is1.FromBottom">
		<ShareCodeSnippetButton RevealedLanguages="RevealedLanguages">
			Share results
		</ShareCodeSnippetButton>
	</Div>

	<Div Padding="Padding.Is1.FromBottom">
		<NextGameTimer />
	</Div>
}
else
{
	<LanguageSelection AvailableLanguages="@AvailableLanguages" OnLanguageSelected="@OnLanguageSelected"/>
}

<code>
	<pre>
        @concealedSourceCode
    </pre>
</code>

<div style="display: flex; flex-wrap: wrap; flex-direction: row; gap: 1em;">
	@foreach (var language in RevealedLanguages)
	{
			@if (language == TargetLanguage)
			{
				<span class="snippet-language snippet-language-match">
					<span>@language.Name</span>
				</span>
			}
			else
			{
				<span class="snippet-language snippet-language-no-match">
					<span>@language.Name</span>
				</span>
			}
	}
</div>

@code
{
	private ISnippetsGuessGame GuessGame { get; set; } = null!;
	private SnippetRevealer snippetRevealer = null!;
	private string concealedSourceCode = "";

	private IReadOnlyList<ILanguage> AvailableLanguages => GuessGame.RemainingLanguages.ToList();
	private List<ILanguage> RevealedLanguages => GuessGame.Guesses.ToList();
	private ILanguage TargetLanguage => GuessGame.TargetLanguage;
	private ICodeSnippet Snippet => GuessGame.Snippet;
	private bool Won => GuessGame.HasWon;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		snippetRevealer = new SnippetRevealer(Snippet.SourceCode, useJitter: true);

		concealedSourceCode = snippetRevealer.RevealMore();

		GuessGame = await GameProvider.GetOrCreateSnippetsGame();
	}

	private void OnLanguageSelected(ILanguage language)
	{
		GuessGame.GuessLanguage(language);

		if (GuessGame.HasWon)
		{
			snippetRevealer.Win();
			concealedSourceCode = Snippet.SourceCode;
		}
		else
		{
			concealedSourceCode = snippetRevealer.RevealMore();
		}

		StateHasChanged();
	}
}
