@page "/Snippets"

@inject ISnippetsGameController Controller

<style>
	code {
		background: transparent;
	}

	.snippet-language {
		padding: 0.5em;
		border-radius: 0.5em;
		color: var(--color-on-match-inner);
	}

	.snippet-language > span {
		padding: 0.3em 0.5em;
		background: var(--color-match-inner);
		border-radius: 0.35em;
	}

	.snippet-language-match {
		color: var(--color-on-exact-match);
		background-color: var(--color-exact-match);
	}

	.snippet-language-no-match {
		color: var(--color-on-no-match);
		background-color: var(--color-no-match);
	}
</style>

<Heading Size="HeadingSize.Is1">Guess a Language</Heading>
<Heading Size="HeadingSize.Is2">â€¦based on a sample code snippet</Heading>

@if (Controller.Won)
{
	<Heading Size="HeadingSize.Is3">You won!</Heading>

	<Div Padding="Padding.Is1.FromBottom">
		<ShareCodeSnippetButton RevealedLanguages="Controller.RevealedLanguages">
			Share results
		</ShareCodeSnippetButton>
	</Div>

	<Div Margin="Margin.Is3.FromBottom">
		<NextGameTimer/>
	</Div>
}

@if (Controller.RevealFilename && Controller.Snippet is not null)
{
	<Paragraph Margin="Margin.Is2.FromBottom">
		Filename: <code>@Controller.Snippet.Filename</code>.

		@if (Controller.Won && Controller.Snippet is IAttributedCodeSnippet attributedSnippet)
		{
			@if (Uri.TryCreate(attributedSnippet.Attribution, UriKind.Absolute, out var uri))
			{
				<span>From: <a href="@uri">@uri</a></span>
			}
			else
			{
				<span>Written by @attributedSnippet.Attribution</span>
			}

			@if (attributedSnippet is ILicensedCodeSnippet licensedSnippet)
			{
				<span>, licensed as follows: <strong style="font-weight: 500">@licensedSnippet.License</strong>.</span>
			}
			else
			{
				<span>.</span>
			}
		}
	</Paragraph>
}

<ConcealedSourceCode Snippet="@Controller.Snippet" RevealedPercent="@Controller.RevealedPercent"
                     Style="padding: 0.5rem; border-radius: 0.5rem;"/>

<div style="display: flex; flex-wrap: wrap; flex-direction: row; gap: 1em; margin-top: 1rem;">
	@foreach (var language in Controller.RevealedLanguages)
	{
		@if (language == Controller.TargetLanguage)
		{
			<span class="snippet-language snippet-language-match">
				<span>@language.Name</span>
			</span>
		}
		else
		{
			<span class="snippet-language snippet-language-no-match">
				<span>@language.Name</span>
			</span>
		}
	}
</div>

@if (!Controller.Won)
{
	<LanguageSelection AvailableLanguages="@SelectableLanguages" OnLanguageSelected="@OnLanguageSelected"/>
}

@code
{

	private IReadOnlyList<ILanguage> SelectableLanguages => Controller.AvailableLanguages.Except(Controller.RevealedLanguages).ToList();

	protected override async Task OnInitializedAsync()
	{
		await Controller.InitializeAsync();
	}

	private async Task OnLanguageSelected(ILanguage language)
	{
		await Controller.GuessAsync(language);

		StateHasChanged();
	}

}
