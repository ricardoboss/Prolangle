@page "/Snippets"

@using Prolangle.Components
@using Prolangle.Services
@using Prolangle.Abstractions.Languages
@using Prolangle.Abstractions.Services
@using Prolangle.Abstractions.Snippets
@using Prolangle.Extensions
@using Prolangle.Models.Db
@using TG.Blazor.IndexedDB

@inject IGameSeedProvider GameSeeder
@inject ISnippetsProvider LanguageSnippetProvider
@inject IndexedDBManager DbManager
@inject ILogger<Snippets> Logger;
@inject ISnippetChooser SnippetChooser;

<style>
	code {
		background: transparent;
	}

	.snippet-language {
		padding: 0.5em;
		border-radius: 0.5em;
		color: var(--color-on-match-inner);
	}

	.snippet-language > span {
		padding: 0.3em 0.5em;
		background: var(--color-match-inner);
		border-radius: 0.35em;
	}

	.snippet-language-match {
		color: var(--color-on-exact-match);
		background-color: var(--color-exact-match);
	}

	.snippet-language-no-match {
		color: var(--color-on-no-match);
		background-color: var(--color-no-match);
	}
</style>

<Heading Size="HeadingSize.Is1">Guess a Language</Heading>
<Heading Size="HeadingSize.Is2">â€¦based on a sample code snippet</Heading>

@if (_won && Snippet is not null)
{
	<Heading Size="HeadingSize.Is3">You won!</Heading>

	@if (Snippet is not IAttributedCodeSnippet attributedSnippet)
	{
		<Paragraph Margin="Margin.Is2.FromBottom">
			This snippet was <code>@Snippet.Filename</code>.
		</Paragraph>
	}
	else
	{
		<Paragraph Margin="Margin.Is2.FromBottom">
			This snippet, <code>@attributedSnippet.Filename</code>, was

			@if (Uri.TryCreate(attributedSnippet.Attribution, UriKind.Absolute, out Uri? uri))
			{
				<span> from: <a href="@uri">@uri</a></span>
			}
			else
			{
				<span> written by @attributedSnippet.Attribution</span>
			}

			@if (Snippet is not ILicensedCodeSnippet licensedSnippet)
			{
				<span>.</span>
			}
			else
			{
				<span>, licensed as follows: <strong style="font-weight: 500">@licensedSnippet.License</strong>.</span>
			}
		</Paragraph>
	}

	<Div Padding="Padding.Is1.FromBottom">
		<ShareCodeSnippetButton RevealedLanguages="RevealedLanguages">
			Share results
		</ShareCodeSnippetButton>
	</Div>

	<Div Padding="Padding.Is1.FromBottom">
		<NextGameTimer/>
	</Div>
}
else
{
	<LanguageSelection AvailableLanguages="@AvailableLanguages" RevealedLanguages="@RevealedLanguages"
	                   OnLanguageSelected="@OnLanguageSelected"/>
}

<code>
	<pre>
        @_concealedSourceCode
    </pre>
</code>

<div style="display: flex; flex-wrap: wrap; flex-direction: row; gap: 1em;">
	@foreach (var language in RevealedLanguages)
	{
		@if (language == TargetLanguage)
		{
			<span class="snippet-language snippet-language-match">
				<span>@language.Name</span>
			</span>
		}
		else
		{
			<span class="snippet-language snippet-language-no-match">
				<span>@language.Name</span>
			</span>
		}
	}
</div>

@code
{
	private List<ILanguage> AvailableLanguages => LanguageSnippetProvider.GetAvailableLanguages().Where(l => !RevealedLanguages.Contains(l)).OrderBy(l => l.Name).ToList();
	private List<ILanguage> RevealedLanguages { get; } = [];
	private ILanguage? TargetLanguage { get; set; }
	private ICodeSnippet? Snippet { get; set; }
	private Game? Game;
	private bool _won;

	private SnippetRevealer? _snippetRevealer;

	private string? _concealedSourceCode;

	protected override async Task OnInitializedAsync()
	{
		await DbManager.OpenDb();

		DbManager.ActionCompleted += (_, args) => Logger.LogInformation("IndexedDB: {Message} => {Outcome}", args.Message, args.Outcome);
	}

	protected override async Task OnParametersSetAsync()
	{
		var languageSeed = GameSeeder.GetCurrentSnippetsGameLanguageSeed();

		var games = await DbManager.GetRecords<Game>(Game.StoreName);
		var game = games.FirstOrDefault(g => g.Seed == languageSeed.Value && g.TypeId == GameType.SnippetsGameTypeId);

		Logger.LogInformation("Tried to load game for today: {Game}", game);

		if (game is { SecondarySolutionId: { } snippetId })
		{
			Snippet = LanguageSnippetProvider.GetById(snippetId);
			Game = game;
		}
		else
		{
			var snippetSeed = GameSeeder.GetCurrentSnippetsGameSnippetSeed();
			Snippet = SnippetChooser.ChooseSnippet(languageSeed, snippetSeed);
			game = new()
			{
				Id = Guid.NewGuid(),
				Seed = languageSeed.Value,
				PlayedAt = DateTimeOffset.Now,
				SolutionId = Snippet.Language.Id,
				SecondarySolutionId = Snippet.Id,
				TypeId = GameType.SnippetsGameTypeId,
			};

			await DbManager.AddRecord<Game>(new()
			{
				Storename = Game.StoreName,
				Data = game,
			});

			Logger.LogInformation("Created new game: {Game}", game);
		}

		TargetLanguage = Snippet.Language;
		_snippetRevealer = new SnippetRevealer(GameSeeder, Snippet.SourceCode, useJitter: true);

		_concealedSourceCode = _snippetRevealer.RevealMore();
		var allGuesses = await DbManager.GetRecords<Guess>(Guess.StoreName);
		var guesses = allGuesses?.Where(g => g.GameId == game.Id).ToList();

		if (guesses is { Count: > 0 })
		{
			RevealedLanguages.AddRange(guesses.OrderBy(g => g.PlayedAt).Select(g => AvailableLanguages.Single(l => l.Id == g.LanguageId)));

			Logger.LogInformation("Loaded {GuessCount} guess(es)", guesses.Count);

			if (RevealedLanguages.Any(l => Game.SolutionId == l.Id))
			{
				_won = true;
				_snippetRevealer!.Win();

				_concealedSourceCode = Snippet!.SourceCode;
			}
		}
		else
		{
			Logger.LogInformation("No guesses for game yet.");
		}
	}

	private async void OnLanguageSelected(ILanguage language)
	{
		if (Game == null)
			return;

		RevealedLanguages.Add(language);

		var guess = new Guess
		{
			GameId = Game.Id,
			LanguageId = language.Id,
			PlayedAt = DateTimeOffset.Now,
		};

		await DbManager.AddRecord<Guess>(new()
		{
			Storename = Guess.StoreName,
			Data = guess,
		});

		if (Game.SolutionId == language.Id)
		{
			_won = true;
			_snippetRevealer!.Win();

			_concealedSourceCode = Snippet!.SourceCode;
		}
		else
		{
			_concealedSourceCode = _snippetRevealer!.RevealMore();
		}

		Logger.LogInformation("Added guess {Guess} (won = {Won})", guess, _won);

		StateHasChanged();
	}
}
