@page "/"

@using Prolangle.Abstractions.Languages
@using Prolangle.Abstractions.Services
@using Prolangle.Components
@using Prolangle.Extensions
@using Prolangle.Models.Db
@using TG.Blazor.IndexedDB

@inject IGameSeedProvider GameSeeder
@inject ILanguageChooser LanguageChooser
@inject ILanguagesProvider LanguagesProvider
@inject IndexedDBManager DbManager
@inject ILogger<Home> Logger;

<Heading Size="HeadingSize.Is1">Guess a Language</Heading>
<Heading Size="HeadingSize.Is2">…based on its properties</Heading>

@if (TargetLanguage != null)
{
	<MetadatumComparisonTable TargetLanguage="TargetLanguage" RevealedLanguages="RevealedLanguages"/>
}

@if (won)
{
	<Heading Size="HeadingSize.Is3">You won!</Heading>

	<ShareMetadatumComparisonButton TargetLanguage="TargetLanguage" RevealedLanguages="RevealedLanguages">
		Share results
	</ShareMetadatumComparisonButton>

	<NextGameTimer/>
}
else
{
	<LanguageSelection AvailableLanguages="@AvailableLanguages" RevealedLanguages="@RevealedLanguages"
	                   OnLanguageSelected="@OnLanguageSelected"/>

	@if (guessCount == 0)
	{
		<p>
			<Icon Name="IconName.Lightbulb" Padding="Padding.Is2"/>

			<span>
				Lost? Just try picking a language, or head to <NavLink href="/explanations">Explanations</NavLink>
				for more info.
			</span>
		</p>
	}
	else
	{
		<p>
			<Icon Name="IconName.Lightbulb" Padding="Padding.Is2"/>

			<span>
				Boxes are
				<span class="match-hint-wrap Exact"><span class="match-hint">green</span></span>
				if they're an exact match,
				<span class="match-hint-wrap Partial"><span class="match-hint">orange</span></span>
				if <em>some</em> of the properties (which will be in <strong>bold</strong>) match, and
				<span class="match-hint-wrap None"><span class="match-hint">red</span></span>
				if you got this aspect wrong.
			</span>
		</p>

		<p>
			<Icon Name="IconName.Lightbulb" Padding="Padding.Is2"/>

			<span>
				Some terms are <span class="popover-available-hint">underlined</span>. You can tap or click those to get
				a quick explanation. Or, head to <NavLink href="/explanations">Explanations</NavLink> for more info.
			</span>
		</p>
	}
}

@code {

	private List<ILanguage> AvailableLanguages => LanguagesProvider!.GetAll().Where(l => !RevealedLanguages.Contains(l)).OrderBy(l => l.Name).ToList();
	private List<ILanguage> RevealedLanguages { get; } = [];
	private ILanguage? TargetLanguage { get; set; }
	private Game? Game;

	// revisit these fields once #22 is resolved
	private int guessCount;
	private bool won;

	protected override async Task OnInitializedAsync()
	{
		await DbManager.OpenDb();

		DbManager.ActionCompleted += (_, args) => Logger.LogInformation("IndexedDB: {Message} => {Outcome}", args.Message, args.Outcome);
	}

	protected override async Task OnParametersSetAsync()
	{
		var seed = GameSeeder.GetCurrentPropertiesGameSeed();
		var games = await DbManager.GetRecords<Game>(Game.StoreName);
		var game = games.FirstOrDefault(g => g.Seed == seed.Value && g.TypeId == GameType.PropertiesGameTypeId);

		Logger.LogInformation("Tried to load game for today: {Game}", game);

		if (game == null)
		{
			TargetLanguage = LanguageChooser.ChooseLanguage(seed);
			game = new()
			{
				Id = Guid.NewGuid(),
				Seed = seed.Value,
				PlayedAt = DateTimeOffset.Now,
				SolutionId = TargetLanguage.Id,
				TypeId = GameType.PropertiesGameTypeId,
			};

			await DbManager.AddRecord<Game>(new()
			{
				Storename = Game.StoreName,
				Data = game,
			});

			Logger.LogInformation("Created new game: {Game}", game);
		}
		else
		{
			TargetLanguage = LanguagesProvider.GetById(game.SolutionId);
			Game = game;
		}

		var allGuesses = await DbManager.GetRecords<Guess>(Guess.StoreName);
		var guesses = allGuesses?.Where(g => g.GameId == game.Id).ToList();

		if (guesses is { Count: > 0 })
		{
			RevealedLanguages.AddRange(guesses.OrderBy(g => g.PlayedAt).Select(g => AvailableLanguages.Single(l => l.Id == g.LanguageId)));

			Logger.LogInformation("Loaded {GuessCount} guess(es)", guesses.Count);

			won = RevealedLanguages.Any(l => Game.SolutionId == l.Id);
		}
		else
		{
			Logger.LogInformation("No guesses for game yet.");
		}
	}

	private async void OnLanguageSelected(ILanguage language)
	{
		if (Game == null)
			return;

		guessCount++;

		RevealedLanguages.Add(language);

		var guess = new Guess
		{
			GameId = Game.Id,
			LanguageId = language.Id,
			PlayedAt = DateTimeOffset.Now,
		};

		await DbManager.AddRecord<Guess>(new()
		{
			Storename = Guess.StoreName,
			Data = guess,
		});

		if (Game.SolutionId == language.Id)
			won = true;

		Logger.LogInformation("Added guess {Guess} (won = {Won})", guess, won);

		StateHasChanged();
	}

}

<style>
	.match-hint-wrap {
		padding: 0.25em;
		border-radius: 0.25em;
		display: inline-block;
	}

	.match-hint {
		background: var(--color-match-inner);
		border-radius: 0.25em;
		padding: 0.25em 0.15em;
	}

	.match-hint-wrap.Exact {
		color: var(--color-on-exact-match);
		background-color: var(--color-exact-match);
	}

	.match-hint-wrap.Partial {
		color: var(--color-on-partial-match);
		background-color: var(--color-partial-match);
	}

	.match-hint-wrap.None {
		color: var(--color-on-no-match);
		background-color: var(--color-no-match);
	}
</style>
