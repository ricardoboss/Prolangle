@inject IJSRuntime JsRuntime
@inject ILanguageComparer Comparer;

@code {

	[Parameter]
	public required RenderFragment ChildContent { get; set; }

	[Parameter]
	public required ILanguage TargetLanguage { get; set; }

	[Parameter]
	public required IReadOnlyList<ILanguage> RevealedLanguages { get; set; }

	Snackbar snackbar = null!;
	string snackbarMessage = "";

	private async Task OnClicked()
	{
		var comparisons = GetComparisonResults();
		var shareContent = $"Found today's #prolangle language in {"attempt".ToQuantity(RevealedLanguages.Count)}!\n\n{comparisons}\nTry it yourself at https://prolangle.ricardoboss.de";

		snackbarMessage = await JsRuntime!.InvokeAsync<string>("shareResult", shareContent);

		await snackbar.Show()!;
	}

	private string GetComparisonResults()
	{
		var builder = new StringBuilder();

		foreach (var language in RevealedLanguages.Take(4))
		{
			var comparison = Comparer.Compare(TargetLanguage, language);

			foreach (var match in new List<MatchType> { comparison.TypeSystemMatch, comparison.CompiledMatch, comparison.MemoryManagementMatch, comparison.SyntaxStyleMatch, comparison.ApplicationsMatch, comparison.ParadigmsMatch })
			{
				builder.Append(match switch
				{
					MatchType.Exact => "ðŸŸ©",
					MatchType.Partial => "ðŸŸ¨",
					MatchType.None => "ðŸŸ¥",
					_ => throw new NotImplementedException(),
				});
			}

			foreach (var direction in new List<ComparisonDirection> { comparison.TiobeRatingDirection, comparison.AppearanceYearDirection })
			{
				builder.Append(direction switch
				{
					ComparisonDirection.Up => "ðŸ”¼",
					ComparisonDirection.Down => "ðŸ”½",
					ComparisonDirection.Equal => "ðŸŸ©",
					_ => throw new NotImplementedException(),
				});
			}

			builder.AppendLine();
		}

		return builder.ToString();
	}

}

<Button @onclick="OnClicked">
	@ChildContent
</Button>

<Snackbar @ref="snackbar">
	<SnackbarBody>
		@snackbarMessage
	</SnackbarBody>
</Snackbar>
