<style>
	.language-selection-wrapper {
		display: flex;
		justify-content: space-between;
	}
</style>

<Div class="language-selection-wrapper" Margin="Margin.Is2.OnY">
	<BlazoredTypeahead SearchMethod="Search"
	                   placeholder="Type the name of a language…"
	                   ShowDropDownOnFocus="true"
	                   MaximumSuggestions="100"
	                   @bind-Value="SelectedLanguage">
		<SelectedTemplate>
			@context.Name
		</SelectedTemplate>
		<ResultTemplate>
			@context.Name
		</ResultTemplate>
		<NotFoundTemplate>
			<span style="font-style: italic">
				@if (!string.IsNullOrWhiteSpace(Query) &&
				     RevealedLanguages.Any(l => l.Name.Equals(Query, StringComparison.InvariantCultureIgnoreCase)))
				{
					<span>You've already tried that language!</span>
				}
				else
				{
					<span>We don't have any languages by that name.</span>
				}
			</span>
		</NotFoundTemplate>
	</BlazoredTypeahead>

	<Button @onclick="Guess" Margin="Margin.Is2.FromStart">Guess</Button>
</Div>

@code {
	private string Query { get; set; } = "";
	private ILanguage? SelectedLanguage { get; set; }

	private Task<IEnumerable<ILanguage>> Search(string query)
	{
		Query = query;

		return Task.FromResult(AvailableLanguages
			.Where(language => language.Name.Contains(Query, StringComparison.OrdinalIgnoreCase)));
	}

	[Parameter]
	public required IReadOnlyList<ILanguage> AvailableLanguages { get; set; }

	[Parameter]
	public required IReadOnlyList<ILanguage> RevealedLanguages { get; set; }

	[Parameter]
	public EventCallback<ILanguage> OnLanguageSelected { get; set; }

	private async Task Guess()
	{
		if (SelectedLanguage is null)
			return;

		await OnLanguageSelected.InvokeAsync(SelectedLanguage);

		SelectedLanguage = null;
	}

}
