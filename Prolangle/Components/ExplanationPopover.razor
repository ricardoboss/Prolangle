@using BlazorComponentUtilities
@using Blazorise.Extensions

@inject IJSRuntime JSRuntime

@code {

	[Parameter]
	public required RenderFragment ChildContent { get; set; }

	[Parameter]
	public required string Content { get; set; }

	[Parameter]
	public required string Title { get; set; }

	[Parameter]
	public required string Url { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();

	private readonly string id = Guid.NewGuid().ToString();

	private string PopoverId => "popover-" + id;

	private string AnchorId => "anchor-" + id;

	CssBuilder CssClass => CssBuilder.Empty().AddClassFromAttributes(AdditionalAttributes);

	bool WillHavePopover => !string.IsNullOrWhiteSpace(Content);

	private record BoundingBox(double X, double Y, double Width, double Height);

	private BoundingBox? anchorBox;
	private BoundingBox? popoverBox;

	private async Task OnPopoverToggled()
	{
		anchorBox = await JSRuntime.InvokeAsync<BoundingBox>("getBoundingBox", AnchorId);
		popoverBox = await JSRuntime.InvokeAsync<BoundingBox>("getBoundingBox", PopoverId);
	}

	private string PopoverStyle
	{
		get
		{
			const string style = "border: none; padding: 0; margin: 0; position: absolute; font-weight: normal; ";

			var anchorLeft = anchorBox?.X ?? 0;
			var anchorTop = anchorBox?.Y ?? 0;
			var anchorWidth = anchorBox?.Width ?? 0;
			var anchorHeight = anchorBox?.Height ?? 0;

			var popoverWidth = popoverBox?.Width ?? 0;

			var x = anchorLeft + anchorWidth / 2 - popoverWidth / 2;
			var y = anchorTop + anchorHeight + 10;

			return style + $"left: {x.ToCultureInvariantString()}px; top: {y.ToCultureInvariantString()}px;";
		}
	}

}

<button id="@AnchorId" popovertarget="@PopoverId" popovertargetaction="toggle" class="@CssClass" style="border: none">
	@ChildContent

	@if (WillHavePopover)
	{
		<div popover id="@PopoverId" style="@PopoverStyle" @ontoggle="OnPopoverToggled">
			<Div Display="Display.Flex" Flex="Flex.Column" Border="Border.Is1.Info.OnAll.Rounded">
				<Div Display="Display.Flex" Flex="Flex.Column" Padding="Padding.Is1" Background="Background.Secondary" Border="Border.Is1.Info.OnBottom">
					<Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">
						@Title
					</Heading>

					@if (!string.IsNullOrWhiteSpace(Url))
					{
						<Anchor href="@Url" Target="Target.Blank">More Information</Anchor>
					}
				</Div>

				<Paragraph Padding="Padding.Is2" style="max-width: 20rem; white-space: normal">
					@Content
				</Paragraph>
			</Div>
		</div>
	}
</button>
