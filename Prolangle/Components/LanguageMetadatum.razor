@using BlazorComponentUtilities
@using System.Text
@using Prolangle.Extensions
@using Prolangle.Languages.Framework
@using Prolangle.Services

@typeparam TEnum where TEnum : System.Enum

@{
	bool any = false;
}

@foreach ((TEnum flag, string displayName) in Enum.GetValues(typeof(TEnum))
	          .Cast<TEnum>()
	          .Where(f => !Exclude.HasFlag(f))
	          .Select(f => (Flag: f, displayName: f.GetDisplayNameOrFallback()))
	          .OrderBy(x => x.displayName))
{
	if (!Value.HasFlag(flag) && !Overlap.HasFlag(flag))
		continue;

	any = true;

	var cssClassBuilder = new CssBuilder();

	if (Overlap.HasFlag(flag))
		cssClassBuilder.AddClass("overlap");

	var desc = LanguageMetadataProvider.ResolveDescription(flag);
	var moreInfoUrl = LanguageMetadataProvider.ResolveMoreInfoUrl(flag);

	var style = "";
	if (!string.IsNullOrWhiteSpace(desc))
	{
		cssClassBuilder.AddClass("popover-available-hint");
		style = "cursor: help";
	}

	string flagName = displayName;

	<ExplanationPopover Content="@desc" Title="@flagName" Url="@moreInfoUrl" class="@cssClassBuilder.Build()">
		<span style="@style">@flagName</span>
	</ExplanationPopover>
}

@if (!any)
{
	<span>N/A</span>
}

@code {

	[Parameter]
	public required TEnum Overlap { get; set; }

	[Parameter]
	public required TEnum Value { get; set; }

	[Parameter]
	public required TEnum Exclude { get; set; }

}
